;  *;  * Trinkuhr;  *;  * main.pb;  *;  * Copyright 2020 by Markus Mueller <markus.mueller.73@hotmail.de>;  *;  * This program is free software; you can redistribute it and/or modify;  * it under the terms of the GNU General Public License As published by;  * the Free Software Foundation; either version 2 of the License, or;  * (at your option) any later version.;  *;  * This program is distributed in the hope that it will be useful,;  * but WITHOUT ANY WARRANTY; without even the implied warranty of;  * MERCHANTABILITY or FITNESS for A PARTICULAR PURPOSE.  See the;  * GNU General Public License for more details.;  *;  * You should have received a copy of the GNU General Public License;  * along with this program; if not, write to the Free Software;  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,;  * MA 02110-1301, USA.;  *XIncludeFile "header.pbi"Declare   timer_thread ( *ptr )Declare.l main ( )Define.l RESULT = main()End RESULTProcedure.l main()    Protected.b quit = #False  Protected.l popup_state, anim_state, anim_timer, user_select, elapsed_time  Protected.i wnd_evt, evt_wnd, evt_gdg, evt_mnu, evt_typ, evt_tmr, timer_thread  Protected.s font_txt  Protected   prefs.Preferences    prefs\anim_time = 4    load_preferences(prefs)    If open_popup_window(prefs\width, prefs\height)        ResizeWindow(#POPUP_WND, get_popup_x_coord(prefs\x_pos), get_popup_y_coord(prefs\y_pos), #PB_Ignore, #PB_Ignore)        SetWindowColor(#POPUP_WND, prefs\bg_color)    SetGadgetColor(#POPUP_TXT_DRINK, #PB_Gadget_BackColor, prefs\bg_color)    SetGadgetColor(#POPUP_TXT_DRINK, #PB_Gadget_FrontColor, prefs\fg_color)        If LoadFont(#POPUP_FONT, prefs\font_name, prefs\font_size, prefs\font_style)      SetGadgetFont(#POPUP_TXT_DRINK, FontID(#POPUP_FONT))      SetGadgetText(#POPUP_TXT_DRINK, prefs\drink_text)    Else      error("Can't load font '"+prefs\font_name+"@"+Str(prefs\font_size)+"'.")    EndIf        If create_tray_menu(prefs\wait_time)      AddWindowTimer(#POPUP_WND, #WAIT_TIMER, prefs\wait_time * #TIMER_MIN_2_MILISECS)    Else      error("Can't init tray icon and menu.", 4)    EndIf      Else    error("Can't create window.", 3)  EndIf    popup_state = #WAIT  ;   timer_thread = CreateThread(@timer_thread(), @elapsed_time):Debug "addr: " + Str(@elapsed_time);   If Not IsThread(timer_thread);     error("Can't create timer thread.", 5);   EndIf    Repeat        ;-->process window events    wnd_evt = WaitWindowEvent()    evt_wnd = EventWindow()    evt_mnu = EventMenu()    evt_gdg = EventGadget()    evt_typ = EventType()    evt_tmr = EventTimer()        Select wnd_evt            ;--->close window      Case #PB_Event_CloseWindow                If evt_wnd = #ABOUT_WND          CloseWindow(#ABOUT_WND)          If IsImage(#IMAGE_APP)            FreeImage(#IMAGE_APP)          EndIf        ElseIf evt_wnd = #PREF_WINDOW          CloseWindow(#PREF_WINDOW)        ElseIf evt_wnd = #POPUP_WND          quit = #True        EndIf              ;--->menu events      Case #PB_Event_Menu                Select evt_mnu                      Case #POPUP_MNU_FILE_SETTINGS, #SYSTRAY_MNU_SETTINGS            open_preferences_window()            set_preferences(prefs)            HideWindow(#PREF_WINDOW, #False)                      Case #POPUP_MNU_FILE_QUIT, #SYSTRAY_MNU_QUIT            quit = #True                      Case #POPUP_MNU_HELP_ABOUT, #SYSTRAY_MNU_ABOUT            open_about_window()                    EndSelect              ;--->gadgetevents      Case #PB_Event_Gadget                Select evt_gdg                      Case #PREF_BTN_OK                        get_preferences(prefs)                        CloseWindow(#PREF_WINDOW)                        ResizeWindow(#POPUP_WND, get_popup_x_coord(prefs\x_pos), get_popup_y_coord(prefs\y_pos), #PB_Ignore, #PB_Ignore)                        SetWindowColor(#POPUP_WND, prefs\bg_color)                        SetGadgetColor(#POPUP_TXT_DRINK, #PB_Gadget_BackColor, prefs\bg_color)            SetGadgetColor(#POPUP_TXT_DRINK, #PB_Gadget_FrontColor, prefs\fg_color)                        SetGadgetFont(#POPUP_TXT_DRINK, FontID(#POPUP_FONT))            SetGadgetText(#POPUP_TXT_DRINK, prefs\drink_text)                        save_preferences(prefs)                      Case #PREF_BTN_CANCEL                        CloseWindow(#PREF_WINDOW)                      Case #PREF_BTN_COLOR_FG                        user_select = ColorRequester(prefs\fg_color)            If user_select > -1              prefs\fg_color = user_select              If create_button_color(#IMAGE_PREF_FG_COLOR, prefs\fg_color)                SetGadgetAttribute(#PREF_BTN_COLOR_FG, #PB_Button_Image, ImageID(#IMAGE_PREF_FG_COLOR))              EndIf              SetGadgetData(#PREF_BTN_COLOR_FG, prefs\fg_color)            EndIf                      Case #PREF_BTN_COLOR_BG                        user_select = ColorRequester(prefs\bg_color)            If user_select > -1              prefs\bg_color = user_select              If create_button_color(#IMAGE_PREF_BG_COLOR, prefs\bg_color)                SetGadgetAttribute(#PREF_BTN_COLOR_BG, #PB_Button_Image, ImageID(#IMAGE_PREF_BG_COLOR))              EndIf              SetGadgetData(#PREF_BTN_COLOR_BG, prefs\bg_color)            EndIf                      Case #PREF_BTN_FONT                        user_select = FontRequester(prefs\font_name, prefs\font_size, prefs\font_style)            If user_select <> 0              prefs\font_name = SelectedFontName()              prefs\font_size = SelectedFontSize()              prefs\font_style = SelectedFontStyle()              If IsFont(#POPUP_FONT)                FreeFont(#POPUP_FONT)              EndIf              LoadFont(#POPUP_FONT, prefs\font_name, prefs\font_size, prefs\font_style)              SetGadgetFont(#PREF_STR_FONT, FontID(#POPUP_FONT))              SetGadgetText(#PREF_STR_FONT, prefs\font_name)            EndIf                      Case #ABOUT_BTN_OK                        CloseWindow(#ABOUT_WND)            If IsImage(#IMAGE_APP)              FreeImage(#IMAGE_APP)            EndIf                    EndSelect              ;--->systray events      Case #PB_Event_SysTray                DisplayPopupMenu(#SYSTRAY_MNU, WindowID(#POPUP_WND), DesktopMouseX(), DesktopMouseY())              ;--->timer events      Case #PB_Event_Timer                If popup_state = #NONE          Continue ; don't        EndIf                Select evt_tmr                      Case #WAIT_TIMER                        RemoveWindowTimer(#POPUP_WND, #WAIT_TIMER)            AddWindowTimer(#POPUP_WND, #ANIM_TIMER, 4)            bring_window_to_top(#POPUP_WND)            HideWindow(#POPUP_WND, #False)            anim_state = #ANIM_SHOW            popup_state = anim_state                      Case #SHOW_TIMER                        RemoveWindowTimer(#POPUP_WND, #SHOW_TIMER)            AddWindowTimer(#POPUP_WND, #ANIM_TIMER, 4)            bring_window_to_top(#POPUP_WND)            anim_state = #ANIM_HIDE            popup_state = anim_state:Debug "actual secs: " + Str(elapsed_time)                      Case #ANIM_TIMER                        If anim_state = #ANIM_SHOW                            If anim_timer < 250                anim_timer + 1                set_window_transparency(#POPUP_WND, anim_timer)                bring_window_to_top(#POPUP_WND)              Else                anim_timer = 255                set_window_transparency(#POPUP_WND, anim_timer)                RemoveWindowTimer(#POPUP_WND, #ANIM_TIMER)                AddWindowTimer(#POPUP_WND, #SHOW_TIMER, prefs\show_time * #TIMER_MIN_2_MILISECS)                popup_state = #SHOW              EndIf                            ElseIf anim_state = #ANIM_HIDE                            If anim_timer > 0                anim_timer - 1                set_window_transparency(#POPUP_WND, anim_timer)                bring_window_to_top(#POPUP_WND)              Else                anim_timer = 0                set_window_transparency(#POPUP_WND, anim_timer)                HideWindow(#POPUP_WND, #True)                RemoveWindowTimer(#POPUP_WND, #ANIM_TIMER)                AddWindowTimer(#POPUP_WND, #WAIT_TIMER, prefs\wait_time * #TIMER_MIN_2_MILISECS)                popup_state = #WAIT : elapsed_time = -1:Debug "actual secs: " + Str(elapsed_time)              EndIf                          EndIf                    EndSelect            EndSelect      Until quit    ;-->return  ProcedureReturn 0  EndProcedureProcedure timer_thread ( *ptr )    Protected.l secs    Debug "param: " + Str(*ptr)    While #True        Delay(1000)        If PeekL(*ptr) < 0      secs = 0    Else      secs + 1    EndIf    PokeL(*ptr, secs)        Debug "seconds: " + Str(PeekL(*ptr))       Wend  EndProcedure; IDE Options = PureBasic 5.73 LTS (Windows - x64); CursorPosition = 56; FirstLine = 35; Folding = -; EnableXP; EnablePurifier; EnableCompileCount = 12; EnableBuildCount = 0; EnableExeConstant