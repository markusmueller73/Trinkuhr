;  *;  * Trinkuhr;  *;  * popup_window.pbi;  *CompilerIf #PB_Compiler_OS = #PB_OS_Linux  CompilerIf Subsystem("QT")    ;  CompilerElse    ImportC "-gtk"       gtk_window_set_opacity    (*window, opacity.d)      gtk_widget_is_composited  (*widget)    EndImport  CompilerEndIfCompilerEndIfProcedure set_window_transparency( window.i , transparency.l = 0 )    CompilerSelect #PB_Compiler_OS          CompilerCase #PB_OS_Linux            If gtk_widget_is_composited(WindowID(window))        gtk_window_set_opacity(WindowID(window), transparency / 256)      EndIf           CompilerCase #PB_OS_MacOS            Protected alpha.CGFloat      alpha = transparency / 256      CocoaMessage(0, WindowID(window), "setAlphaValue:@", @alpha)          CompilerCase #PB_OS_Windows            SetWindowLongPtr_(WindowID(window), #GWL_EXSTYLE, #WS_EX_LAYERED)      SetLayeredWindowAttributes_(WindowID(window), 0, transparency, #LWA_ALPHA)          CompilerDefault      error ( "The application isn't for this OS type. Exiting.", 2 )        CompilerEndSelect  EndProcedureProcedure bring_window_to_top( window.i )  CompilerSelect #PB_Compiler_OS          CompilerCase #PB_OS_Linux          CompilerCase #PB_OS_MacOS            Protected.i app      CocoaMessage(@app,0,"NSApplication sharedApplication")      CocoaMessage(0, app, "activateIgnoringOtherApps:", #True)          CompilerCase #PB_OS_Windows            SetForegroundWindow_(WindowID(window))      SetActiveWindow_(WindowID(window))      BringWindowToTop_(WindowID(window))          CompilerDefault      error ( "The application isn't for this OS type. Exiting.", 1 )          CompilerEndSelectEndProcedureProcedure.l get_taskbar_position()    CompilerSelect #PB_Compiler_OS          CompilerCase #PB_OS_Linux      ;          CompilerCase #PB_OS_MacOS      ProcedureReturn #TOP          CompilerCase #PB_OS_Windows            Protected taskbar.i, taskbar_rect.RECT      taskbar = FindWindow_("Shell_traywnd", #Null)      If taskbar = #Null        ProcedureReturn #UNKNOWN      EndIf      GetWindowRect_(taskbar, @taskbar_rect)      If (taskbar_rect\right - taskbar_rect\left) < (taskbar_rect\bottom - taskbar_rect\top)        If taskbar_rect\left = 0          ProcedureReturn #LEFT        Else          ProcedureReturn #RIGHT        EndIf      Else        If taskbar_rect\top = 0          ProcedureReturn #TOP        Else          ProcedureReturn #BOTTOM        EndIf      EndIf         CompilerEndSelect  EndProcedureProcedure.l get_taskbar_height()    CompilerSelect #PB_Compiler_OS          CompilerCase #PB_OS_Linux      ;          CompilerCase #PB_OS_MacOS      Protected.l height      height = CocoaMessage(0, 0, "NSMenu menuBarHeight")      ProcedureReturn height          CompilerCase #PB_OS_Windows            Protected taskbar.i, taskbar_rect.RECT      taskbar = FindWindow_("Shell_traywnd", #Null)      GetWindowRect_(taskbar, @taskbar_rect)      ProcedureReturn taskbar_rect\bottom - taskbar_rect\top        CompilerEndSelect  EndProcedure Procedure.l get_taskbar_width()    CompilerSelect #PB_Compiler_OS          CompilerCase #PB_OS_Linux      ;          CompilerCase #PB_OS_MacOS      Protected.l width      If ExamineDesktops()        width = DesktopWidth(0)      EndIf      ProcedureReturn width          CompilerCase #PB_OS_Windows      Protected taskbar.i, taskbar_rect.RECT      taskbar = FindWindow_("Shell_traywnd", #Null)      GetWindowRect_(taskbar, @taskbar_rect)      ProcedureReturn taskbar_rect\right - taskbar_rect\left         CompilerEndSelect  EndProcedureProcedure.i open_popup_window( width.l , height.l )    Protected.l x, y, flags    flags = #PB_Window_BorderLess|#PB_Window_Invisible    If OpenWindow(#POPUP_WND, #PB_Ignore, #PB_Ignore, width, height, #APP_NAME, flags)        set_window_transparency(#POPUP_WND, 0)        CompilerIf #PB_Compiler_OS = #PB_OS_MacOS            If CreateMenu(#POPUP_MNU, WindowID(#POPUP_WND))                MenuItem(#POPUP_MNU_FILE_SETTINGS, "Settings")        MenuItem(#POPUP_MNU_FILE_QUIT, "Quit")        MenuItem(#POPUP_MNU_HELP_ABOUT, "About " + #APP_NAME)              EndIf          CompilerEndIf        CatchImage(#IMAGE_GLASS, ?DRINK_WATER_ICON)        ImageGadget(#POPUP_IMG_GLASS, 0, 0, 100, 100, ImageID(#IMAGE_GLASS))    TextGadget(#POPUP_TXT_DRINK, 100, #POPUP_WINDOW_HEIGHT/4, WindowWidth(#POPUP_WND)-100, #POPUP_WINDOW_HEIGHT/2, "", #PB_Text_Center)      Else    ProcedureReturn 0  EndIf    ProcedureReturn WindowID(#POPUP_WND)  EndProcedureProcedure.i create_tray_menu( minutes.l )    If CatchImage(#IMAGE_SYSTRAY, ?TRAY_ICON)        AddSysTrayIcon(#SYSTRAY, WindowID(#POPUP_WND), ImageID(#IMAGE_SYSTRAY))    SysTrayIconToolTip(#SYSTRAY, #APP_NAME + #NL$ + "Sie sollten alle " + Str(minutes) + " Minuten etwas trinken.")        If CreatePopupMenu(#SYSTRAY_MNU)            MenuItem(#SYSTRAY_MNU_ABOUT, "About" + Space(1) + #APP_NAME)      MenuBar()      MenuItem(#SYSTRAY_MNU_SETTINGS, "Preferences")      MenuBar()      MenuItem(#SYSTRAY_MNU_QUIT, "Quit" + Space(1) + #APP_NAME)            ;AddKeyboardShortcut(#POPUP_WND, #PB_Shortcut_Escape, #SYSTRAY_MNU_QUIT)          Else      ProcedureReturn 0    EndIf      Else    ProcedureReturn 0  EndIf    ProcedureReturn 1  EndProcedureProcedure.l get_popup_x_coord( hori_position.l )    Protected.l x, dw, tbw, tb_pos    If ExamineDesktops()    dw = DesktopWidth(0)  EndIf    tb_pos = get_taskbar_position()  If tb_pos = #LEFT Or tb_pos = #RIGHT    tbw = get_taskbar_width()  EndIf    Select hori_position    Case #LEFT      x = 0 + tbw + 1    Case #CENTER      x = (dw - #POPUP_WINDOW_WIDTH) / 2    Case #RIGHT      x = dw - #POPUP_WINDOW_WIDTH - tbw - 1  EndSelect    ProcedureReturn x  EndProcedureProcedure.l get_popup_y_coord( vert_position.l )    Protected.l y, dh, tbh, tb_pos    If ExamineDesktops()    dh = DesktopHeight(0)  EndIf    tb_pos= get_taskbar_position()  If tb_pos = #TOP Or tb_pos = #BOTTOM    tbh = get_taskbar_height()  EndIf    Select vert_position    Case #TOP      y = 0 + tbh + 1    Case #MIDDLE      y = (dh - #POPUP_WINDOW_HEIGHT) / 2    Case #BOTTOM      y = dh - #POPUP_WINDOW_HEIGHT - tbh - 1  EndSelect    ProcedureReturn y  EndProcedure; IDE Options = PureBasic 5.73 LTS (Windows - x64); CursorPosition = 60; FirstLine = 38; Folding = ---; EnableXP; EnablePurifier; EnableCompileCount = 0; EnableBuildCount = 0; EnableExeConstant